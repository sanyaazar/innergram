// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Chat {
  chatID    Int       @id @default(autoincrement())
  chatPhoto String?
  createdAt DateTime  @default(now())

  ChatMessage ChatMessage[] @relation()
  ChatUser ChatUser[] @relation()
}

model ChatMessage {
  chatID    Int       
  senderID Int
  messageID Int 

  Chat Chat @relation( fields: [chatID], references: [chatID])
  User User @relation(fields: [senderID], references: [userID])
  Message Message @relation(fields: [messageID], references: [messageID])
  @@id([chatID, senderID, messageID])
}

model ChatUser {
  chatID   Int
  userID   Int 
  userRole Role @default(USER)
  joinedAt DateTime @default(now())

  Chat Chat @relation(fields: [chatID], references: [chatID])
  User User @relation(fields: [userID], references: [userID])

  @@id([chatID, userID])
}

model Message {
  messageID   Int       @id @default(autoincrement())
  messageText String
  userID      Int
  sendAt      DateTime  @default(now())

  User User      @relation(fields: [userID], references: [userID])
  DialogMessage DialogMessage[] @relation()
  ChatMessage ChatMessage[] @relation()
  Content     Content[]
}

model DialogMessage {
  senderID Int
  receiverID Int
  messageID Int

  sender User @relation("Sender", fields: [senderID], references: [userID])
  receiver User @relation("Receiver", fields: [receiverID], references: [userID])
  Message Message @relation(fields: [messageID], references: [messageID])
  @@id([senderID, receiverID, messageID])
}
model User {
  userID         Int       @id @default(autoincrement())
  login          String    @unique
  password       String
  tel            String    @unique
  email          String    @unique
  displayName    String
  // displayPhoto   Content?  @relation("UserContent", fields: [displayPhotoID], references: [contentID])
  displayPhotoID String? @unique
  dateOfBirth    DateTime?

  ContactOwner Contact[] @relation("contact1")
  ContactContacy Contact[] @relation("contact2")
  ChatMessage ChatMessage[] @relation()
  ChatUser ChatUser[] @relation()
  DialogMessageSender DialogMessage[] @relation("Sender")
  DialogMessageReceiver DialogMessage[] @relation("Receiver")
  Message Message[] @relation()
  RecoveryCodesByEmail RecoveryCodesByEmail[] @relation()
  Session Session[] @relation()
}


model RecoveryCodesByEmail {
  user        User      @relation(fields: [userID], references: [userID])
  userID Int @unique
  code String
  expiresAt DateTime @db.Timestamptz()
}
model Content {
  contentID Int      @id @default(autoincrement())
  file      String
  message   Message? @relation(fields: [messageID], references: [messageID])
  messageID Int
}

model Contact {
  ownerID Int
  contactID Int

  UserOwner User @relation("contact1", fields: [ownerID], references: [userID])
  UserContact User @relation("contact2", fields: [contactID], references: [userID])

  @@id([ownerID, contactID])
}

model Session {
  sessionID Int @id @default(autoincrement())
  userID Int
  refreshToken String
  userAgent String
  ip String
  expiresAt DateTime @db.Timestamptz()
  createdAt DateTime @default(now())

  User User @relation(fields: [userID], references: [userID])
}

enum Role {
  ADMIN
  USER
}